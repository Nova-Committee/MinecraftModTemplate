plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

base {
    archivesName = "${mod_name}-forge-${minecraft_version}"
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.hotSwap', "true"
            arg '-torg.spongepowered.asm.launch.MixinTweaker'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.hotSwap', "true"
            arg '-torg.spongepowered.asm.launch.MixinTweaker'
        }
    }
}

// 将依赖打包
configurations {
    embed
    implementation.extendsFrom(embed)
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'Nova Release Maven'
        url 'https://maven.nova-committee.cn/releases'
    }
    mavenLocal() // 必须置于最后
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'

    // 使用mixin.
    implementation ('zone.rong:mixinbooter:9.1') {
        transitive = false
    }
    annotationProcessor ('zone.rong:mixinbooter:9.1') {
        transitive = false
    }

    // 从文件夹读取依赖
    //compileOnly fg.deobf(fileTree("libs/XXX.jar"))
    // 打包依赖
    //embed(compileOnly fg.deobf("XXX"))

    compileOnly ("org.projectlombok:lombok:1.18.24")
    annotationProcessor ("org.projectlombok:lombok:1.18.24")
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")
    debug.export = true
    disableTargetExport = false
}

jar {
    manifest {
        attributes([
                "FMLCorePlugin": "committee.nova.mods.examplemod.EarlyMixinInit",// 记得修改包名
                "FMLCorePluginContainsFMLMod": true,
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "${mod_author}",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "${mod_author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    from(provider { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } }){ // 打包依赖
        exclude 'LICENSE.txt', 'META-INF/MANIFSET.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF'
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'pack.mcmeta'
        include "${mod_id}.mixins.json"
        expand 'mod_id': mod_id, 'mod_name': mod_name, 'version': project.version,
                'mcversion': minecraft_version, 'mod_description': mod_description,
                'mod_author': mod_author, 'mod_credits': mod_credits, 'mod_license': mod_license,
                'mod_require': mod_require
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        include 'pack.mcmeta'
        include "${mod_id}.mixins.json"
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // 使用 UTF-8 字符集进行 Java 编译
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "release"
            url = 'https://maven.nova-committee.cn/releases'// 发布到新星仓库
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}